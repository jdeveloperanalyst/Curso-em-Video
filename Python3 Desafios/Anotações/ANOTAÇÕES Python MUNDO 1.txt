''"" == Áspas Simples ou Duplas. São delimitadores especiais para aparecer uma mensagem na tela.
() == Parênteses. Todos os comandos são funções e todas as funções devem ter parênteses.
Print == Função 'escreva'. Esta é a função utilizada para mostrar uma mensagem na tela.
Exemplo:

################################
#MOSTRANDO UMA MENSAGEM NA TELA#
################################

print ('Olá, Mundo!') 

Porém nem tudo é mensagem. Para o python, números não estão entre áspas.

7  4

Qual a diferença de uma mensagem e um número?
-Mensagens são usadas primordialmente para serem exibidas na tela.
-Números são utilizados priordialmente para fazer calculos.
Exemplo:


######################
#APRESENTANDO NÚMEROS#
######################

print(7+4) == 11

print('7'+'4') 74

Para realizar a junção/concatenação te texto e números, podem ser usado a vírgula (,) ou (+).
Basta práticas para saber em qual momento usar.
Exemplo:

print('Olá' + 5) == #VAI DAR ERRO#

print ('Olá' , 5) == Olá 5 #Trará um resultado de junção entre texto e número#

-----------------------------------------------------------------------------------

VARIÁVEIS 

Toda váriavel é um objeto para o Python. Escreva sempre letras minúsculas no caso do Python.

nome
idade
peso

Toda variável pode receber valores. Esse 'recebe' é simbolizado pelo sinal de igual '='.

nome = 'Guanabara'
idade = 25
peso = 75.8

agora vamos mostrar esses valores na tela utilizando a função print.

print(nome,idade,peso)

nome = input ('Qual é seu nome?')
idade = input ('Quantos anos você tem?')
peso = input ('Quanto você pesa?')
print(nome,idade,peso)

Função print = escreva
Função imput = leia

-----------------------------------------------------------------------------------

É possivel usar um bloco de chaves e formatar essa variável para esse bloco depois da string:

nome = input('Qual é o seu nome?')
print('É um prazer te conhecer, {}!'.format(nome))

-----------------------------------------------------------------------------------

TIPOS PRIMITIVOS E SAÍDA DE DADOS

n1 = input('Digite um número:') #Neste caso o valor que é digitado dentro do input, mesmo que ele seja um número, será considerado uma string#

Neste caso devemos usar um dos tipos primitivos que é o tipo INT:

n1 = int(input('Qual é o seu nome?')) #Tudo que esta dentro do int, será convertido/considerado um número inteiro#

Os 4 tipos primitivos mais básicos que existem:

INT = 7, -4, 0, 9875. #Sendo, positivo, negativo ou nulo são considerados inteiros#
FLOAT = 4.5, 0.076, -15.223, 7.0 #Ponto flutuante/float, considerados na matemática básica como números reais#
BOOL = True, False #Sempre caracterizar 'verdadeiro ou falso'de forma primeira letra maiúscula#
STR = 'Olá', '7.5', ''. #Strings são sempre caracterizadas entre áspas simples ou duplas e '' representa uma string vazi#

-----------------------------------------------------------------------------------

FORMA DIFERENTE DE UTILIZAR O 'PRINT' -> ESCREVER NA TELA

print('A soma vale'), s)

print('A soma vale {}',format(s)) #.format -> metodo da própria string, boas práticas de trabalhar com .format#

SENDO ASSIM:

n1 = int(input('Digite um valor: '))
n2 = int(input('Digite outro valor: '))
s = n1 + n2
#print('A soma entre', n1, 'e', n2, 'vale:', s) #ESSA É A FORMA ANTIGA DO PYTHON# 
print('A soma entre {} e {} vale: {}'.format(n1, n2, s)) #ESSA É A NOVA FORMA DE SE TRABALHAR COM PYTHON#

Por boas práticas utilizaremos daqui pra frente a sintaxe .format que é um metodo de qualquer string que funciona muito bem.

-----------------------------------------------------------------------------------

Metodos interessantes das váriaveis n1 e n2

n = imput('Digite algo: ')
print(n.isnumeric())

#################################################################################################################################
#Neste caso ele pergunta se N é númerico? Por mais que esteja passando como string ele irá responder o que é númerico utilizando#
#o método .isnumeric(). Mostrando como Verdadeiro ou Falso. Na verdade esse metodo isnumeric(), ele vai dizer se é possivel     #
#converter esse valor em um número com o tipo primitivo INT antes dele                                                          #
#################################################################################################################################

n = imput('Digite algo: ')
print(n.isalpha())

###################################################################################################################################################
#Neste caso ele pergunta se ele é alfabeto ou não, tudo que for diferente de letras, dará Falso, do contrário se for apenas letras será Verdadeiro#                                                         #
###################################################################################################################################################


n = input('Digite algo: ')
print(n.isalnum())

###################################################################################################################################################
#Neste caso ele pergunta se ele é alfanumerico ou não, todo valor que vir com letras+números será alpha numerico por mais que estejam sozinhos no #
#qual trará resultado Verdadeiro. Caso o valor for vazio, como um 'espaço' trará resultado como Falso                                             #                                                         #
###################################################################################################################################################

-----------------------------------------------------------------------------------

OPERADORES ARITMÉTICOS


+ Adição
- Subtração
* Multiplicação
/ Divisão
** Exponenciação OR potência
// Divisão inteira
% Resto da divisão

= atribuição or recebe
== igualdade

EXEMPLOS

operando 5+2 operando == 7
operando 5-2 operando == 3
operando 5*2 operando == 10
operando 5/2 operando == 2.5
operando 5**2 operando == 25
operando 5//2 operando == 2  
5|_2_ 
1| 2
resultado divisão inteira == 2
operando 5%2 operando == 1
5|_2_ 
1| 2
resultado resto da divisão == 1

-----------------------------------------------------------------------------------

OEDEM DE PRECEDÊNCIA

Quais são os operadores que são executados em primeiro lugar?

1º () Parênteses == A primeira coisa a ser calculada quando tem uma expressão são os parênteses. Tem parênteses? Executa primeiro.
2º ** Potências == A segunda ordêm de precedência são as potências.
3º * Multiplicação, / Divisão, //Divisão Inteira, % Resto de Divisão == Terceira ordêm de precedência.
4º + Soma, - Subtração == Quarta ordêm de precedência

EXEMPLOS:

5+3*2 == 11 - Resolver primeiro a multiplicação
3*5+4**2 = 31 - Resolver primeiro a potência, multiplicação e por fim soma.
3*(5+4)**2 = 243 - Resolver primeiro os parênteses, potência e por fim multiplicação.

-----------------------------------------------------------------------------------

pow(4,3) == 64 

Ou seja, pode ser usado o operador de potencia ou a função interna de potencia. Quando é utilizado
a função interna, você perde a ordem de precedência. 


Raiz Quadrada - Calcular a raiz quadrada de um número nada mais é que criar a potencia dele por meio 0,5 que é a mesma coisa de 1/2.

81**(1/2) == 9.0

Outro exemplo: 25**(1/2) == 5

Raiz Cúbica - Calcular a Raiz cúbica de um número nada mais é que criar a potencia dele por 0,3 que é a mesma coisa de 1/3.

127**(1/3) == 5.026525695313479

É possivel também aplicar operações aritméticas em string/textos.

É possivel manipular a quantidade de caracteres dentro do format ao imprimir na tela, utilizando também alinhamentos
com os sinais de > maior <menor e ^ circunflexo para centralizar.

   
É possivel realizar as operações dentro do print conforme abaixo:

n1 = int(input('Digite um número:'))
n2 = int(input('Digite outro número:'))
print('A soma vale:{}'.format(n1+n2))

Vai depender muito da necessidade de manipulação sobre as variavéis.

Para não quebrar a linha de um print() para outro print(), basta apenas colocar , end=' ' no final do código print().

De forma similar posso quebrar a linha no meio do print() utilizando o \n == quebra de linha

EXEMPLO ABAIXO:

n1 = int(input('Digite um valor:'))
n2 = int(input('Digite outro valor:'))
s = n1 + n2
m = n1 * n2
d = n1 / n2
di = n1 // n2
e = n1 ** n2
print('A soma é: {}, o produto é: {}, e a divisão é: {:.3f}'.format(s, m, d), end='>>>>')
print('A Divisão inteira é: {}\ne potencia: {}'.format(di, e))

-----------------------------------------------------------------------------------

UTILIZANDO MÓDULOS

-BEBIDA-  -BEBIDA-  -DOCE-
|      |  |      |  |    |
|______|  |______|  |____| 

São chamados de bibliotecas, neste caso necessário para o nosso corpo, podemos importa-las a qualquer momento.

COMO INCLUIR ALGO?

utilizando a linguagem Python para 'incluir' alguma coisa utilizamos o comando IMPORT.
Exemplo:
 _________________________________________________________
|import bebida -> água, guaraná, suco, cerveja, leite.    | 
|                                                         |
|import doce -> rosquinha, pudim, biscoito, bolo, sorvete.|
|_________________________________________________________|

Neste caso acima, estamos importando as bibliotecas/módulos com tudo que ela possui dentro.

Para realizar importações únicas iremos utilizar o comando abaixo:
 _________________________
|from doce import -> pudim|
|_________________________|

Dessa maneira, você irá importar apenas o pudim, economizando mais espaço de armanezamento no seu programa.

############################################################################################################################################################
#import bebidas - este  comando é mais generalista importando todas as funcionalidades do módulo                                                           #
#                                                                                                                                                          #        
#from doce import -> pudim - este comando é mais especifico, importando apenas as funcionalidades que eu escolher economizando um pocuo mais a sua memória.#
############################################################################################################################################################


OUTRAS BIBLIOTECAS 

math - significa matemática: Ela vai trazer algumas funcionalidades matemáticas extras.
   funcionalidades:
   -ceil: Faz o arredondamento de um valor para cima.
   -floor: Faz o arredondamento para baixo.
   -trunc: Elimina um número da virgula para frente sem fazer arredondamento nenhum.
   -pow: Potencia
   -sqrt: Raiz quadrada
   -factorial: Faz o calculo fatorial de um número.

import math -> trás todas as funcionalidade 

from math import sqrt -> importou sómente a funcionalidade especifica para fazer raiz quadrada.

from math import sqrt,ceil -> importou duas funcionalidades especificas, raiz quadrada e arredondamento para cima.

-----------------------------------------------------------------------------------

Manipulando Textos

frase = 'Curso em Video Python' -> isso é uma cadeia de texto, também chamada como 'string' contendo 21 caracteres no qual são alocados na memória do computador.

podemos fazer operações com algumas técnicas.

-FATIAMENTO - fatia uma string significa conseguir pegar pedaços da string.

frase[9] -> pega apenas a letra 9 da string declarada na variavel FRASE, que seria a letra V.

frase[9:13] pega o indice 9 e vai até o 13 - VÍDE -> sempre pega um a menos na cadeira de string, para pegar a letra 'O' deve-se utilizar frase[9:14] - VÍDEO

frase[9:21:2] pega o indice do 9 ao 21 sempre exluindo o ultimo número, e vai pulando de 2 em 2 casas. V D O P T O

frase[:5] vai pegar tudo que tem antes dos : até a letra5 (lembrando que sempre o final é excluido) - CURSO

frase[15:] vai pegar da letra 15 até o final (não será excluido a ultima letra por não ter determinado um final) - PYTHON

frase[9::3] vai pegar da linha 9 até o final pulando de 3 em 3 casas.

-ANALISE - Saber informações sobre a string (qual o tamanho dela, com que letra começa, com que letra termina, qual é a primeira palavra inteira)

len(frase) analisa o comprimento da frase, 21 caracteres.

frase.count('o') quantas vezes existe a letra 'o' minuscula. 

frase.count('o',0,13) faz a contagem já com fatiamento, do 0 até o 12 existe simplesmente uma letra 'o'.

frase.find('deo') vai dizer quantas vezes encontrou 'deo' nesta frase. vai indicar em que momento começo o 'deo' que no caso é na posição 11.

frase.find('android') vai retornar o valor -1. Sabendo que a string começa na posição 0, o valor retornado -1 significa que a string indicada como parametro não existe na cadeia de caracteres FRASE.

'Curso' in frase Dentro da frase existe a palavra curso. Utilizando o operador 'in' ele vai retornar True(verdadeiro) pois existe essa palavra em FRASE.

-TRANSFORMAÇÃO- Uma lista de string é imutável, porém você consegue mudar ela através de metodos.

frase.replace('Python','Android') Realiza a troca de uma palavra por outra.

frase.upper() Vai fazer as frases ficarem todas maisculas.

frase.lower() vai fazer as frases ficarem todas minusculas.

frase.capitalize() Joga todos os caracteres por minusculas e apenas o primeiro caractere vai ficar em maiusculos.(EXEMPLO: Curso em video python)

frase.tittle() Analisa quantas palavras tem a string e transforma todos os primeiros caracteres das palavras existentes em maiusculo.(EXEMPLO: Curso Em Video Python)

Mudando a string dentro de frase para (Aprenda Python)

frase.strip() remove todos os espaços no inicio e no final da cadeia de string (EXEMPLO: xxxAprenda Pythonxxx) remove os espaços representados por 'x')

frase.rstrip() remove somente os ultimos espaços. r == right(direita)

frase.lstrip() remove somente os primeiros espaços. l == left(esquerda)

Voltando a string dentro de frase para (Curso em Video Python)

-DIVISÃO- Dividir strings

frase.split() Vai criar uma divisão dentro da string considerando os espaços (EXEMPLO: 'Curso em Video Python' como esta atualmente.('Curso''em''Video''Python', cada palavra recebe indexação nova, tendo 4 cadeias de caracteres)) 

-JUNÇÃO - juntar uma coisa na outra

'-'.join(frase) mostraria uma string unica com o caractere indicado de sua preferencia(EXEMPLO: Curso-em-Video-Python)

-----------------------------------------------------------------------------------

CONDIÇÕES SIMPLES E COMPOSTAS

Representação de uma estrutura condicional
if carro.esquerda():
   bloco True
else:
   bloco False

Em uma condição, ou o bloco verdadeiro é executado, ou o bloco Falso será executado. Nunca os dois ao mesmo tempo.

- CONDIÇÃO COMPOSTA - 

tempo = int(input('Quantos anos tem o seu carro?'))
if tempo <=3:
   print('carro novo')
else:
   print('carro velho')
print('--FIM--')

- CONDIÇÃO SIMPLES -

Executando o mesmo programa com menos linha de comando:

tempo = int(input('Quantos anos tem o seu carro?'))
print('carro novo' if tempo <=3 else 'carro velho')
print('--FIM--')

-----------------------------------------------------------------------------------

CORES NO TERMINAL

Padrão ANSI - escape sequence

\033[style - text - backm (no final da mensagem fechar a cor) -> \033[m

EXEMPLO: 

\033[0;33;44m 

style
0 none
1 bold
4 Underline
7 Negative

text
30 - preto
31 - vermelho
32 - verde
33 - amarelo 
34 - azul
35 - roxo
36 - azul bebe
37 - cinza
97 - branco

back/background
40 - branco 
41 - vermelho
42 - verde
43 - amarelo 
44 - azul
45 - roxo
46 - azul bebe
47 - cinza

